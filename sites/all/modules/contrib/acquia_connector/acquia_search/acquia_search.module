<?php

/**
 * @file
 *   Integration between Acquia Drupal and Acquia's hosted solr search service.
 */

define('ACQUIA_SEARCH_ENVIRONMENT_ID', 'acquia_search_server_1');

/**
 * Predefined Acquia Search network environment
 */
function acquia_search_get_environment() {
  return array(
    'env_id' => ACQUIA_SEARCH_ENVIRONMENT_ID,
    'name' => t('Acquia Search'),
    // @todo - server URL may depend on region info.
    'url' => variable_get('acquia_search_url', 'http://search.acquia.com/solr/'. acquia_agent_settings('acquia_identifier')),
    'service_class' => 'AcquiaSearchService',
  );
}

/**
 * Implementation of hook_enable().
 */
function acquia_search_enable() {
  if (acquia_agent_subscription_is_active()) {
    acquia_search_enable_acquia_solr_environment();
    // Send a heartbeat so the Acquia Network knows the module is enabled.
    acquia_agent_check_subscription();
  }
}

/**
 * Implementation of hook_init().
 */
function acquia_search_init() {
  if (arg(0) == 'admin' && arg(1) == 'config' && arg(2) == 'search' && arg(3) == 'apachesolr'
      && user_access('administer search')
      && acquia_agent_subscription_is_active()
      && variable_get('apachesolr_default_environment') == ACQUIA_SEARCH_ENVIRONMENT_ID
      && empty($_POST)) {
    $as_link = l(t('Acquia Search'), 'http://acquia.com/products-services/acquia-search');
    drupal_set_message(t("Search is being provided by the !as network service.", array('!as' => $as_link)));
  }
}

/**
 * Create a new record pointing to the Acquia apachesolr search server and set it as the default
 */
function acquia_search_enable_acquia_solr_environment() {
  $environment = apachesolr_environment_load(ACQUIA_SEARCH_ENVIRONMENT_ID);
  if ($environment != acquia_search_get_environment()) {
    apachesolr_environment_save(acquia_search_get_environment());
  }
  // Only set the default if we just createdd the environment.
  if (!$environment) {
    variable_set('apachesolr_default_environment', ACQUIA_SEARCH_ENVIRONMENT_ID);
  }
}

/**
 * Implementation of hook_disable().
 *
 * Helper function to clear variables we may have set.
 */
function acquia_search_disable() {
  apachesolr_environment_delete(ACQUIA_SEARCH_ENVIRONMENT_ID);
  if (variable_get('apachesolr_default_environment', 'solr') == ACQUIA_SEARCH_ENVIRONMENT_ID) {
    // Go back to the default.
    variable_del('apachesolr_default_environment');
  }
}

/**
 * Implementation of hook_menu_alter().
 */
function acquia_search_menu_alter(&$menu) {
  $delete_page = 'admin/config/search/apachesolr-env/%apachesolr_environment/delete';
  if (isset($menu[$delete_page])) {
    $menu[$delete_page]['access callback'] = 'acquia_search_environment_delete_access';
    $menu[$delete_page]['access arguments'] = array(4);
  };
}

function acquia_search_cron() {
  // Cache the cersion in a variable so we can send it at not extra cost.
  $version = variable_get('acquia_search_version', '7.x');
  $info = system_get_info('module', 'acquia_search');
  // Send the version, or at least the core compatibility as a fallback.
  $new_version = isset($info['version']) ? (string)$info['version'] : (string)$info['core'];
  if ($version != $new_version) {
    variable_set('acquia_search_version', $new_version);
  }
}

/**
 * Delete environment page access.
 */
function acquia_search_environment_delete_access($environment) {
  if ($environment['env_id'] == ACQUIA_SEARCH_ENVIRONMENT_ID) {
    return FALSE;
  }
  // Fall back to the original check.
  return user_access('administer search');
}

/**
 * Implementation of hook_form_[form_id]_alter().
 */
function acquia_search_form_apachesolr_settings_alter(&$form, $form_state) {
  // Don't alter the form if there is no subscription.
  if (acquia_agent_subscription_is_active()) {
    // Don't show delete operation for the AS environment
    foreach ($form['apachesolr_host_settings']['table']['#rows'] as &$row) {
      if (isset($row['data'][2]['data']) && strpos($row['data'][2]['data'], 'search/apachesolr-env/' . ACQUIA_SEARCH_ENVIRONMENT_ID . '/delete') !== FALSE) {
        $row['data'][2]['data'] = '';
        break;
      }
    }
    $form['advanced']['acquia_search_edismax_default'] = array(
      '#type' => 'radios',
      '#title' => t('Always allow advanced syntax for Acquia Search'),
      '#default_value' => variable_get('acquia_search_edismax_default', 0),
      '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
      '#description' => t('If enabled, all Acquia Search keyword searches may use advanced <a href="@url">Lucene syntax</a> such as wildcard searches, fuzzy searches, proximity searches, boolean operators and more via the Extended Dismax parser. If not enabled, this syntax wll only be used when needed to enable wildcard searches.', array('@url' => 'http://lucene.apache.org/java/2_9_3/queryparsersyntax.html')),
      '#weight' => 10,
    );
  }
}

/**
 * Implementation of hook_form_[form_id]_alter().
 */
function acquia_search_form_apachesolr_environment_edit_form_alter(&$form, $form_state) {
  // Do not allow editing of Acquia Search environment parameters
  if (isset($form['env_id']['#default_value']) && $form['env_id']['#default_value'] == ACQUIA_SEARCH_ENVIRONMENT_ID ) {
    $form['url']['#disabled'] = TRUE;
    $form['name']['#disabled'] = TRUE;
    $form['env_id']['#disabled'] = TRUE;
  }

  $form['actions']['delete']['#access'] = FALSE;
  $form['actions']['save']['#validate'][] = 'acquia_search_environment_edit_form_validate';
}

function acquia_search_environment_edit_form_validate($form, &$form_state) {
  if ($form_state['values']['env_id'] == ACQUIA_SEARCH_ENVIRONMENT_ID) {
    // make sure that the environment parameters have not been changed
    $form_state['values'] = array_merge($form_state['values'], acquia_search_get_environment());
  }
}

/**
 * Implementation of hook_acquia_subscription_status().
 */

function acquia_search_acquia_subscription_status($active) {
  if ($active) {
    acquia_search_enable_acquia_solr_environment();
  }
  else {
    acquia_search_disable();
  }
}

/**
 * Modify a solr base url and construct a hmac authenticator cookie.
 *
 * @param $url
 *  The solr url beng requested - passed by reference and may be altered.
 * @param $string
 *  A string - the data to be authenticated, or empty to just use the path
 *  and query from the url to build the authenticator.
 * @param $derived_key
 *  Optional string to supply the derived key.
 *
 * @return
 *  An array containing the string to be added as the content of the
 *  Cookie header to the request and the nonce.
 */
function acquia_search_auth_cookie(&$url, $string = '', $derived_key = NULL) {
  $uri = parse_url($url);

  // Add a scheme - should always be https if available.
  if (in_array('ssl', stream_get_transports(), TRUE) && !defined('ACQUIA_DEVELOPMENT_NOSSL')) {
    $scheme = 'https://';
    $port = '';
  }
  else {
    $scheme = 'http://';
    $port = (isset($uri['port']) && $uri['port'] != 80) ? ':'. $uri['port'] : '';
  }
  $path = isset($uri['path']) ? $uri['path'] : '/';
  $query = isset($uri['query']) ? '?'. $uri['query'] : '';
  $url = $scheme . $uri['host'] . $port . $path . $query;

  // 32 character nonce.
  $nonce = base64_encode(drupal_random_bytes(24));

  if ($string) {
    $auth_header = acquia_search_authenticator($string, $nonce, $derived_key);
  }
  else {
    $auth_header = acquia_search_authenticator($path . $query, $nonce, $derived_key);
  }
  return array($auth_header, $nonce);
}

/**
 * Derive a key for the solr hmac using the information shared with acquia.com.
 */
function _acquia_search_derived_key() {
  static $derived_key;
  if (!isset($derived_key)) {
    $key = acquia_agent_settings('acquia_key');
    $subscription = acquia_agent_settings('acquia_subscription_data');
    $identifier = acquia_agent_settings('acquia_identifier');
    // We use a salt from acquia.com in key derivation since this is a shared
    // value that we could change on the AN side if needed to force any
    // or all clients to use a new derived key.  We also use a string
    // ('solr') specific to the service, since we want each service using a
    // derived key to have a separate one.
    if (empty($subscription['active']) || empty($key) || empty($identifier)) {
      // Expired or invalid subscription - don't continue.
      $derived_key = '';
    }
    else {
      $salt = isset($subscription['derived_key_salt']) ? $subscription['derived_key_salt'] : '';
      $derivation_string = $identifier . 'solr' . $salt;
      $derived_key =  hash_hmac('sha1', str_pad($derivation_string, 80, $derivation_string), $key);
    }
  }
  return $derived_key;
}

/**
 * Creates an authenticator based on a data string and HMAC-SHA1.
 */
function acquia_search_authenticator($string, $nonce, $derived_key = NULL) {
  if (empty($derived_key)) {
    $derived_key = _acquia_search_derived_key();
  }
  if (empty($derived_key)) {
    // Expired or invalid subscription - don't continue.
    return '';
  }
  else {
    $time = REQUEST_TIME;
    return 'acquia_solr_time='. $time .'; acquia_solr_nonce='. $nonce .'; acquia_solr_hmac='. hash_hmac('sha1', $time . $nonce . $string, $derived_key) .';';
  }
}

/**
 * Validate the authenticity of returned data using a nonce and HMAC-SHA1.
 *
 * @return
 *  TRUE or FALSE.
 */
function acquia_search_valid_response($hmac, $nonce, $string, $derived_key = NULL) {
  if (empty($derived_key)) {
    $derived_key = _acquia_search_derived_key();
  }
  return $hmac == hash_hmac('sha1', $nonce . $string, $derived_key);
}

/**
 * Look in the headers and get the hmac_digest out
 * @return string hmac_digest
 *
 */
function acquia_search_extract_hmac($headers) {
  $reg = array();
  if (is_array($headers)) {
    foreach ($headers as $name => $value) {
      if (strtolower($name) == 'pragma' && preg_match("/hmac_digest=([^;]+);/i", $value, $reg)) {
        return trim($reg[1]);
      }
    }
  }
  return '';
}

/**
 * Implementation of hook_apachesolr_modify_query().
 *
 * Possibly alters the query type ('defType') param to edismax.
 */
function acquia_search_apachesolr_query_alter($query) {
  // @todo - does it make sense to check $caller too?
  if ($query->solr('getId') != ACQUIA_SEARCH_ENVIRONMENT_ID || $query->getParam('qt') || $query->getParam('defType')) {
    // This is a 'mlt' query or something else custom.
    return;
  }
  // Set the qt to edismax if we have keywords, and we always use it, or are
  // using a wildcard (* or ?).
  $keys = $query->getParam('q');
  if ($keys && (($wildcard = preg_match('/\S+[*?]/', $keys)) || variable_get('acquia_search_edismax_default', 0))) {
    $query->addParam('defType', 'edismax');
    if ($wildcard) {
      $keys = preg_replace_callback('/(\S+[*?]\S*)/', '_acquia_search_lower', $keys);
      $query->replaceParam('q', $keys);
    }
  }
}

/**
 * Convert to lower-case any keywords containing a wildcard.
 */
function _acquia_search_lower($matches) {
  return drupal_strtolower($matches[1]);
}

