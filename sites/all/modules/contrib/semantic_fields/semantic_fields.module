<?php
/**
 * Implementation of hook_menu()
 */
function semantic_fields_menu() {
  $items = array();

  $items['admin/structure/semantic-fields'] = array(
    'title' => 'Field formats',
    'description' => 'Manage customized, semantic formats for displaying fields.',
    'page callback' => 'semantic_fields_preset_list',
    'access arguments' => array('administer semantic fields'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'semantic_fields.admin.inc',
  );
  $items['admin/structure/semantic-fields/list'] = array(
    'title' => 'List',
    'page callback' => 'semantic_fields_preset_list',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'semantic_fields.admin.inc',
    'weight' => '-1'
  );
  $items['admin/structure/semantic-fields/add'] = array(
    'title' => 'Add field format',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('semantic_fields_preset_form'),
    'access arguments' => array('administer semantic fields'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'semantic_fields.admin.inc',
  );
  foreach (semantic_fields_get_presets() as $preset) {
    $items['admin/structure/semantic-fields/' . $preset['name'] . '/edit'] = array(
      'title' => 'Edit field format',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('semantic_fields_preset_form', 3),
      'access arguments' => array('administer semantic fields'),
      'type' => MENU_CALLBACK,
      'file' => 'semantic_fields.admin.inc',
    );
    $items['admin/structure/semantic-fields/' . $preset['name'] . '/delete'] = array(
      'title' => 'Delete field format',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('semantic_fields_preset_delete_form', 3),
      'access arguments' => array('administer semantic fields'),
      'type' => MENU_CALLBACK,
      'file' => 'semantic_fields.admin.inc',
    );
  }

  return $items;
}

/**
 * Implementation of hook_permission()
 */
function semantic_fields_permission() {
  return array(
    'administer semantic fields' => array(
      'title' => t('Administer semantic fields'),
      'description' => t('Manage presets for customizing the output of fields.'),
    ),
  );
}

function semantic_fields_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'field_ui_field_edit_form') {
    $field = $form['#field'];
    $instance = $form['#instance'];

    $semantic_field_formats = semantic_fields_get_preset_options();

    $form['instance']['semantic_field_instance_format'] = array(
      '#type' => 'select',
      '#title' => t('Display format'),
      '#description' => t('The format to use when viewing this field.'),
      '#options' => $semantic_field_formats,
      '#required' => FALSE,
      '#default_value' => isset($instance['semantic_field_instance_format']) ? $instance['semantic_field_instance_format'] : '',
    );

    $form['field']['semantic_field_format'] = array(
      '#type' => 'select',
      '#title' => t('Display format'),
      '#description' => t('The format to use when viewing this field.'),
      '#options' => $semantic_field_formats,
      '#required' => FALSE,
      '#default_value' => isset($field['semantic_field_format']) ? $field['semantic_field_format'] : '',
    );
  }
}

function semantic_fields_get_presets() {
  $results = db_select('semantic_fields_preset', 'p', array('fetch' => PDO::FETCH_ASSOC))
    ->fields('p')
    ->orderBy('human_name')
    ->execute();

  $presets = array();
  while ($preset = $results->fetchAssoc()) {
    $preset['data'] = unserialize($preset['data']);
    $presets[] = $preset;
  }

  return $presets;
}

function semantic_fields_preset_load($name) {
  $presets = &drupal_static(__FUNCTION__, array());

  if (!isset($presets[$name])) {
    $preset = db_select('semantic_fields_preset', 'p')
      ->fields('p')
      ->condition('name', $name)
      ->execute()
      ->fetchAssoc();
    if ($preset) {
      $preset['data'] = unserialize($preset['data']);
      $presets[$name] = $preset;
    }
  }

  return (isset($presets[$name]) && !empty($presets[$name])) ? $presets[$name] : array();
}

function semantic_fields_get_preset_options() {
  $presets = semantic_fields_get_presets();

  $options = array(
    'default' => t('Default'),
  );
  foreach($presets as $preset) {
    $options[$preset['name']] = check_plain($preset['human_name']);
  }
  
  return $options;
}

function semantic_fields_theme_registry_alter(&$theme_registry) {
  $theme_registry['field']['theme path'] = drupal_get_path('module', 'semantic_fields');
  $theme_registry['field']['function'] = 'theme_semantic_field';
}

function semantic_fields_preprocess_field(&$variables) {
  $element = $variables['element'];
  $field = field_info_field($element['#field_name']);
  $instance = field_info_instance($element['#entity_type'], $element['#field_name'], $element['#bundle']);

  $use_defaults = FALSE;
  if (!isset($instance['semantic_field_instance_format']) && !isset($field['semantic_field_format'])) {
    // Use defaults if Semantic Fields settings do not exist.
    $use_defaults = TRUE;
  }
  else if (isset($instance['semantic_field_instance_format']) && $instance['semantic_field_instance_format'] == 'default' && $field['semantic_field_format'] == 'default') {
    // Use defaults if this field is set to use the default field display format.
    $use_defaults = TRUE;
  }

  // Load semantic field display format settings.
  if (!$use_defaults) {
    $preset = array();
    if (!empty($instance['semantic_field_instance_format'])) {
      $preset = semantic_fields_preset_load($instance['semantic_field_instance_format']);
    }
    if (empty($preset) && !empty($instance['semantic_field_format'])) {
      $preset = semantic_fields_preset_load($instance['semantic_field_format']);
    }
  }
  if (empty($preset)) {
    // Use defaults if settings could not be loaded.
    $use_defaults = TRUE;
  }

  // Use default settings if the selected field format cannot be loaded, or if the Default field format is selected.
  if ($use_defaults) {
    $settings = array(
      'field_element' => 'div',
      'field_class' => '',
      'label_element_above' => 'div',
      'label_class_above' => '',
      'label_suffix_above' => ':',
      'label_element_inline' => 'div',
      'label_class_inline' => '',
      'label_suffix_inline' => ':',
      'multiple_items_element' => 'div',
      'multiple_items_class' => '',
      'multiple_item_element' => 'div',
      'multiple_item_class' => '',
      'use_singlevalue_settings' => 0,
      'single_item_element' => 'div',
      'single_item_class' => '',
      'last_every_nth' => 0,
      'first_class' => '',
      'last_class' => '',
      'striping_classes' => 'odd even',
    );
  }
  else {
    $settings = $preset['data'];
  }

  // Provide Semantic Fields field template suggestions.
  $variables['theme_hook_suggestions'][] = 'semantic_field__' . $element['#field_type'];
  $variables['theme_hook_suggestions'][] = 'semantic_field__' . $element['#field_name'];
  $variables['theme_hook_suggestions'][] = 'semantic_field__' . $element['#bundle'];
  $variables['theme_hook_suggestions'][] = 'semantic_field__' . $element['#field_name'] . '__' . $element['#bundle'];

  // Field
  $variables['field_element'] = $settings['field_element'];
  if (!empty($settings['field_class'])) {
    $variables['classes_array'][] = $settings['field_class'];
  }

  // Label
  $variables['label_element'] = ($element['#label_display'] == "above") ? $settings['label_element_above'] : $settings['label_element_inline'];
  $variables['label_suffix'] = ($element['#label_display'] == "above") ? $settings['label_suffix_above'] : $settings['label_suffix_inline'];
  if (!isset($variables['label_classes_array'])) {
    $variables['label_classes_array'] = array(
      'field-label',
    );
  }
  if ($element['#label_display'] == "above") {
    if (!empty($settings['label_class_above'])) {
      $variables['label_classes_array'][] = $settings['label_class_above'];
    }
  }
  else if ($element['#label_display'] == "inline") {
    if (!empty($settings['label_class_inline'])) {
      $variables['label_classes_array'][] = $settings['label_class_inline'];
    }
  }

  // Items
  if (!isset($variables['content_classes_array'])) {
    $variables['content_classes_array'] = array(
      'field-items',
    );
  }
  $num_items = count($variables['items']);
  if ($num_items == 1) {
    if (!$settings['use_singlevalue_settings']) {
      $variables['content_element'] = $settings['multiple_items_element'];
    }
    else {
      $variables['content_element'] = '';
    }
  }
  else {
    $variables['content_element'] = $settings['multiple_items_element'];
    if (!empty($settings['multiple_items_class'])) {
      $variables['content_classes_array'][] = $settings['multiple_items_class'];
    }
  }

  // Item
  if ($num_items == 1 && $settings['use_singlevalue_settings']) {
    $variables['item_element'] = $settings['single_item_element'];
  }
  else {
    $variables['item_element'] = $settings['multiple_item_element'];
  }

  $variables['item_classes'] = array();
  $last_every_nth = !empty($settings['last_every_nth']) ? $settings['last_every_nth'] : 0;
  foreach ($variables['items'] as $delta => $item) {
    $item_classes = array(
      'field-item',
    );
    if ($num_items == 1) {
      if ($settings['use_singlevalue_settings'] && $settings['single_item_class']) {
        $item_classes[] = $settings['single_item_class'];
      }
      elseif (!$settings['use_singlevalue_settings'] && $settings['multiple_item_class']) {
        $item_classes[] = $settings['multiple_item_class'];
      }
    }
    elseif ($num_items > 1) {
      if ($settings['multiple_item_class']) {
        $item_classes[] = $settings['multiple_item_class'];
      }
    }

    // Striping
    $striping_classes = array();
    if (trim($settings['striping_classes'])) {
      $striping_classes = explode(' ', trim($settings['striping_classes']));
      $item_classes[] = $striping_classes[$delta % count($striping_classes)];
    }

    if ($settings['first_class']) {
      if (($last_every_nth && $delta % $last_every_nth == 0) || (!$last_every_nth && $delta == 0)) {
        $item_classes[] = $settings['first_class'];
      }
    }
    if ($settings['last_class']) {
      if (($last_every_nth && ($delta + 1) % $last_every_nth == 0) || (!$last_every_nth && ($delta + 1) == $num_items)) {
        $item_classes[] = $settings['last_class'];
      }
    }

    $variables['item_classes'][$delta] = $item_classes;
  }
}

function semantic_fields_process_field(&$variables) {
  // Label
  $variables['label_classes'] = (isset($variables['label_classes_array']) && !empty($variables['label_classes_array'])) ? implode(' ', $variables['label_classes_array']) : '';

  // Items
  $variables['content_classes'] = (isset($variables['content_classes_array']) && !empty($variables['label_classes_array'])) ? implode(' ', $variables['content_classes_array']) : '';
  
  // Item
  foreach ($variables['item_classes'] as $delta => $classes) {
    if (is_array($classes)) {
      $variables['item_classes'][$delta] = implode(' ', $classes);
    }
  }
}

/**
 * Implements hook_theme().
 */
function semantic_fields_theme($existing, $type, $theme, $path) {
  return array(
    'semantic_field' => array(
      'render element' => 'element',
    ),
  );
}

function theme_semantic_field(&$variables) {
  $output = '';

  // Render the label, if it's not hidden.
  if (!$variables['label_hidden']) {
    if (!empty($variables['label_element'])) {
      $output .= '<' . $variables['label_element'] . ' class="' . $variables['label_classes'] . '"' . $variables['title_attributes'] . '>';
    }
    $output .= $variables['label'] . $variables['label_suffix'] . '&nbsp;';
    if (!empty($variables['label_element'])) {
      $output .= '</' . $variables['label_element'] . '>';
    }
  }

  // Render the items.
  if (!empty($variables['content_element'])) {
    $output .= '<' . $variables['content_element'] . ' class="' . $variables['content_classes'] . '"' . $variables['content_attributes'] . '>';
  }
  foreach ($variables['items'] as $delta => $item) {
    if ($variables['item_element']) {
      $output .= '<' . $variables['item_element'] . ' class="' . $variables['item_classes'][$delta] . '"' . $variables['item_attributes'][$delta] . '>';
    }
    $output .= drupal_render($item);
    if ($variables['item_element']) {
      $output .= '</' . $variables['item_element'] . '>';
    }
  }
  if (!empty($variables['content_element'])) {
    $output .= '</' . $variables['content_element'] . '>';
  }
  
  // Render the top-level DIV.
  if (!empty($variables['field_element'])) {
    $output = '<' . $variables['field_element'] . ' class="' . $variables['classes'] . '"' . $variables['attributes'] . '>' . $output . '</' . $variables['field_element'] . '>';
  }

  return $output;
}