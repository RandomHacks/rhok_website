<?php
// $Id$
/**
 * @file
 * Exclude Node Title
 *
 * @author Gabriel Ungureanu
 * gabriel.ungreanu@ag-prime.com
 */

/**
 * Implements hook_permission().
 */ 
function exclude_node_title_permission() {
  return array(
    'administer exclude node title' => array(
      'title' => t('Administer exclude node title'),
    ),
    'exclude any node title' => array(
      'title' => t('Exclude any node title'),
    ),
    'exclude own node title' => array(
      'title' => t('Exclude own node title'),
    ),
    'use exclude node title' => array(
      'title' => t('Use exclude node title')
    ),
  );
}

/**
 * Implements hook_menu().
 */
function exclude_node_title_menu() {
  $items = array();
  $items['admin/config/content/exclude_node_title'] = array(
    'title' => 'Exclude Node Title',
    'description' => 'Exclude Node Title from display',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('exclude_node_title_admin_settings'),
    'access arguments' => array('administer exclude node title'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'exclude_node_title.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_preprocess_page().
 */
function exclude_node_title_preprocess_page(&$vars) {
  if (!user_access('use exclude node title')) {
    return;
  }
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    switch (arg(2)) {
      case 'edit':
        $view_mode = 'nodeform';
        break;
      case 'delete':
        return; // delete pages show you all information in title, we should not remove it
      default:
        $view_mode = 'full';
        break;
    }
    if (_exclude_node_title(arg(1), $view_mode)) {
      $vars['title'] = '';
    }
  }
  elseif (arg(0) == 'search' && variable_get('exclude_node_title_search', 0)) {
    $vars['title'] = '';
  }
}

/**
 * Implements hook_node_view()
 */ 
function exclude_node_title_node_view($node, $view_mode) {
  if (user_access('use exclude node title')) {
    if (_exclude_node_title($node, $view_mode)) {
      $node->title = '';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function exclude_node_title_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] . '_node_form' == $form_id) {
    // exclude for title
    if (user_access('use exclude node title')) {
      if (_exclude_node_title($form['#node'], 'nodeform')) {
        drupal_set_title('');
      }
    }
    // --------------
    // make sure user have permissions correct
    if (!user_access('exclude any node title')) {
      global $user;
      if (!user_access('exclude own node title') ||
              ( user_access('exclude own node title') && strcmp($form['#node']->name, $user->name) ) ) {
        return FALSE;
      }
    }
    
    // don't bother to add form element if the content type isn't configured
    // to be excluded by user...
    if (variable_get('exclude_node_title_content_type_value_' . $form['#node']->type) == 'user') {
      $weight = $form['title']['#weight']+0.1;
      $form['exclude_node_title'] = array(
        '#type' => 'checkbox',
        '#title' => t('Exclude title from display'),
        '#required' => FALSE,
        '#default_value' => (!empty($form['nid']['#value']) ? in_array($form['nid']['#value'], variable_get('exclude_node_title_nid_list', array())) : FALSE ),
        '#weight' => $weight,
      );
      $form['#submit'][] = 'exclude_node_title_node_edit_form_submit';
    }
    
  }
}

/**
 * Implements hook_form_submit().
 */
function exclude_node_title_node_edit_form_submit($form, &$form_state) {
  if (isset($form_state['values']['exclude_node_title']) && isset($form_state['values']['nid'])) {
    $exclude_list = variable_get('exclude_node_title_nid_list', array());
    $is_excluded = array_search($form_state['values']['nid'], $exclude_list);
    if ($form_state['values']['exclude_node_title'] == 1 && $is_excluded === FALSE) {
      $exclude_list[] = $form_state['values']['nid'];
      variable_set('exclude_node_title_nid_list', $exclude_list);
      return;
    }
    elseif ($form_state['values']['exclude_node_title'] == 0 && $is_excluded !== FALSE) {
      unset($exclude_list[$is_excluded]);
      variable_set('exclude_node_title_nid_list', $exclude_list);
      return;
    }
  }
}

/**
 * Implements hook_field_attach_delete_bundle().
 */
function exclude_node_title_field_attach_delete_bundle($entity_type, $bundle, $instances) {
  // when deleting a content type, we make sure and clean our variable :)
  if ($entity_type == 'node') {
    variable_del('exclude_node_title_content_type_value_' . $bundle);
    variable_del('exclude_node_title_content_type_modes_' . $bundle);
  }
}

/**
 * Tells if node should get hidden or not.
 * @param $param
 *   Can be a node object or integer value (nid)
 * @return
 *   Returns boolean TRUE if should be hidden, FALSE when not
 */
function _exclude_node_title($param, $view_mode = 'full') {
  
  // we accept only integer and object
  if (!is_object($param) && !is_numeric($param)) {
    return FALSE;
  }
  
  // if numeric, load the node with nid
  if (is_numeric($param)) {
    $node = node_load(intval($param));
  }
  else {
    $node = $param;
    unset($param); // memory cleanup
  }
  $node_type = $node->type;
  $nid = isset($node->nid)?$node->nid:FALSE;
  unset($node); // memory cleanup
  
  // get exclude settings
  static $exclude_settings;
  if (!isset($exclude_settings)) {
    foreach (_node_types_build()->names as $key => $val) {
      $exclude_settings[$key] = array(
        'type'  => variable_get('exclude_node_title_content_type_value_' . $key, 'none'),
        'modes' => variable_get('exclude_node_title_content_type_modes_' . $key, array()),
      );
    }
  }
  switch ($exclude_settings[$node_type]['type']) {
    case 'all':
      return !empty($exclude_settings[$node_type]['modes'][$view_mode]);
    case 'user':
      // we look for the nid list
      if (in_array($nid, variable_get('exclude_node_title_nid_list', array()))) {
        return !empty($exclude_settings[$node_type]['modes'][$view_mode]);
      }
      return FALSE;
      
    case 'none':
    default:
      return FALSE;
      break;
  }
}